scalar Time
scalar JSON

type User {
  id: ID!
  username: String!
  email: String!
  phone: String!
  role: UserRole!
  isActive: Boolean!
  token: String
  isVerified: Boolean!
  idNumber: Float
  lastLogin: Time!
  resetPasswordToken: String
  resetPasswordExpiresAt: Time
  verificationToken: Int
  verificationTokenExpiresAt: Time
  otherDetails: JSON
  createdAt: Time!
  updatedAt: Time!
}

input CreateUserInput {
  username: String!
  email: String!
  phone: String!
  role: UserRole!
  password: String!
}

input SignInInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  username: String
  email: String
  phone: String
  role: UserRole
  isActive: Boolean
  token: String
  idNumber: Float
  otherDetails: JSON
}

type Role {
  id: ID!
  name: String!
  permissions: JSON!
  createdAt: String!
  updatedAt: String!
}

enum UserRole {
  admin
  patient
  doctor
  nurse
  pharmacist
  supplier
  delivery
  procurement
}

type Query {
  user(id: ID!): User
  userByEmail(email: String!): User
  users(limit: Int = 10, offset: Int = 0): [User!]!
  usersCount: Int!


  getRoleById(id: ID!): Role
  getRoleByName(name: String!): Role
  getAllRoles: [Role!]!
  roleExistsByName(name: String!): Boolean!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  signInUser(input: SignInInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  resetPassword(email: String!): Boolean!
  updatePassword(id: ID!, password: String!, token: String!): Boolean!
  verifyUser(email: String!, verificationToken: Int!): User!
  deleteUser(email: String!, token: String!): Boolean!


  createRole(name: String!, permissions: JSON!): Role!
  updateRole(id: ID!, name: String, permissions: JSON): Role
  deleteRole(id: ID!): Boolean!
}
